diff --git a/src/discrete_input_convol.cu b/src/discrete_input_convol.cu
index e5aae3f..adad926 100644
--- a/src/discrete_input_convol.cu
+++ b/src/discrete_input_convol.cu
@@ -345,9 +345,9 @@ void store_spatialWeight(
         areal_weight = 1;
     } else {
         int idx = threadIdx.y * WARP_SIZE + threadIdx.x;
-        w = sample_x[idx];
-        h = sample_y[idx];
-        areal_weight = sample_w[idx];
+        w = sample_x[idx]*wSpan/nsig;
+        h = sample_y[idx]*hSpan/nsig;
+        areal_weight = sample_w[idx]*wSpan*hSpan/nsig/nsig;
     }
 
 	if (blockIdx.x == 0 && blockIdx.y == 0) {
@@ -604,9 +604,9 @@ void store_PM(
             areal_weight = 1;
         } else {
             int idx = threadIdx.y * WARP_SIZE + threadIdx.x;
-            cx = sample_x[idx];
-            cy = sample_y[idx];
-            areal_weight = sample_w[idx];
+            cx = -sample_x[idx]*span/nsig;
+            cy = -sample_y[idx]*span/nsig;
+            areal_weight = sample_w[idx]*span*span/(nsig*nsig);
         }
 
         Float c_rx = reduced[4];
@@ -960,9 +960,9 @@ void parvo_maxConvol_sep(Spatial_component &spatial,
                 y = (h + 0.5)*dhC - hSpanC;
                 areal_weight = 1;
             } else {
-                x = sample_x[pid]; 
-                y = sample_y[pid];
-                areal_weight = sample_w[pid];
+                x = -sample_x[pid]*wSpanC/nsig; 
+                y = -sample_y[pid]*hSpanC/nsig;
+                areal_weight = sample_w[pid]*wSpanC*hSpanC/(nsig*nsig);
             }
 
             // origin at the center of the surround RF
@@ -996,9 +996,9 @@ void parvo_maxConvol_sep(Spatial_component &spatial,
                 y = (h + 0.5)*dhS - hSpanS;
                 areal_weight = 1;
             } else {
-                x = sample_x[pid]; 
-                y = sample_y[pid];
-                areal_weight = sample_w[pid];
+                x = -sample_x[pid]*wSpanS/nsig; 
+                y = -sample_y[pid]*hSpanS/nsig;
+                areal_weight = sample_w[pid]*wSpanS*hSpanS/(nsig*nsig);
             }
 
             // origin at the center of the surround RF
diff --git a/src/patch.cu b/src/patch.cu
index f6956f6..b82b8a4 100644
--- a/src/patch.cu
+++ b/src/patch.cu
@@ -2539,6 +2539,10 @@ int main(int argc, char** argv) {
 	Float max_LGNy = *max_element(LGN_y.begin(), LGN_y.end());
 	Float max_LGN_radius = *max_element(LGN_rw.begin()+nLGN, LGN_rw.end());
 
+    if (nsig == 0) {
+        cout << "nsig must not be zero\n";
+        return EXIT_FAILURE;
+    }
 	cout << "LGN surround nsig x radius occupies " << max_LGN_radius*nsig/deg2rad/max_ecc * normEccMaxStimulus_extent << " of the normalized texture coords' range\n";
     cout << "the entirety of LGN RFs occupies " << (max_LGNx - min_LGNx + 2*max_LGN_radius*nsig/deg2rad)/max_ecc*normEccMaxStimulus_extent << " in normed texture coords\n";
 
@@ -5187,7 +5191,7 @@ int main(int argc, char** argv) {
     Float *sample_x1, *sample_y1, *sample_w1;
     Float *d_sample_x2, *d_sample_y2, *d_sample_w2;
     Float *sample_x2, *sample_y2, *sample_w2;
-    if (nsig == 0) {
+    if (nsig < 0) {
         Py_Initialize();
         if (_import_array() < 0) {
             PyErr_Print();
@@ -5201,7 +5205,7 @@ int main(int argc, char** argv) {
             checkCudaErrors(cudaMalloc((void**) &d_sample_x1, MAX_BLOCKSIZE * sizeof(Float)));
             checkCudaErrors(cudaMalloc((void**) &d_sample_y1, MAX_BLOCKSIZE * sizeof(Float)));
             checkCudaErrors(cudaMalloc((void**) &d_sample_w1, MAX_BLOCKSIZE * sizeof(Float)));
-            sample_2D_Gaussian(nsig, int(MAX_BLOCKSIZE), wv, sample_x1, sample_y1, sample_w1);
+            sample_2D_Gaussian(-nsig, int(MAX_BLOCKSIZE), wv, sample_x1, sample_y1, sample_w1);
             checkCudaErrors(cudaMemcpy(d_sample_x1, sample_x1, MAX_BLOCKSIZE * sizeof(Float), cudaMemcpyHostToDevice));
             checkCudaErrors(cudaMemcpy(d_sample_y1, sample_y1, MAX_BLOCKSIZE * sizeof(Float), cudaMemcpyHostToDevice));
             checkCudaErrors(cudaMemcpy(d_sample_w1, sample_w1, MAX_BLOCKSIZE * sizeof(Float), cudaMemcpyHostToDevice));
@@ -5213,7 +5217,7 @@ int main(int argc, char** argv) {
             checkCudaErrors(cudaMalloc((void**) &d_sample_x2, MAX_BLOCKSIZE * sizeof(Float)));
             checkCudaErrors(cudaMalloc((void**) &d_sample_y2, MAX_BLOCKSIZE * sizeof(Float)));
             checkCudaErrors(cudaMalloc((void**) &d_sample_w2, MAX_BLOCKSIZE * sizeof(Float)));
-            sample_2D_Gaussian_difference(nsig, sigRatio, MAX_BLOCKSIZE, sample_x2, sample_y2, sample_w2);
+            sample_2D_Gaussian_difference(-nsig, sigRatio, MAX_BLOCKSIZE, sample_x2, sample_y2, sample_w2);
             checkCudaErrors(cudaMemcpy(d_sample_x2, sample_x2, MAX_BLOCKSIZE * sizeof(Float), cudaMemcpyHostToDevice));
             checkCudaErrors(cudaMemcpy(d_sample_y2, sample_y2, MAX_BLOCKSIZE * sizeof(Float), cudaMemcpyHostToDevice));
             checkCudaErrors(cudaMemcpy(d_sample_w2, sample_w2, MAX_BLOCKSIZE * sizeof(Float), cudaMemcpyHostToDevice));
